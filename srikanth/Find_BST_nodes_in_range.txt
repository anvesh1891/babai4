 
  import java.util.Stack;
 
  class Node {
      
      Node left, right ;
      int data;
      
      public Node(int item) {
          data = item;
          left = right = null;
      }
  }
  
  class BTree {
      
      Node root;
      
      BTree() {
          root = null;
      }
      
      // recursive
     /* void printInorder(Node root) {
          if(root == null) 
            return;
            
          printInorder(root.left);
          System.out.println(" "+root.data);
          printInorder(root.right);
      }
      
      void printInorderTree () { printInorder(root); }*/
    
      /* Iterative
      void Inorder() {
          if (root == null) 
            return;
          
          Stack<Node> stack = new Stack<Node>();
          Node node = root;
          
          while (node != null) {
              stack.push(node);
              node = node.left;
          }
          
          while (stack.size() > 0) {
            node = stack.pop();
            System.out.println(" "+node.data);
            
            if (node.right != null ) {
                node = node.right;
                
                while(node != null) {
                    stack.push(node);
                    node = node.left;
                }
            }
            
          }
      }*/
      
      
     void printInorderInRange(Node root, int n1, int n2) {
          if(root == null) 
            return;
          if (n1 < root.data)  
             printInorderInRange(root.left, n1, n2);
          
          if ( n1 < root.data && n2 > root.data)
             System.out.println(" "+root.data);
          
          if (n2 > root.data)     
             printInorderInRange(root.right, n1, n2);
      }
      
      void printInorderTreeWithInRange (int n1, int n2) { printInorderInRange(root, n1, n2); }
    
      
      // Test
      public static void main (String args[]) throws Exception {
          BTree tree = new BTree();
          tree.root = new Node(4);
          tree.root.left = new Node(2);
          tree.root.right = new Node(5);
          tree.root.left.left = new Node(1);
          tree.root.left.right = new Node(3);
          
          System.out.println(" Inorder traversal of tree is...");
          
          //tree.printInorderTree();
          //tree.Inorder();
          
          tree.printInorderTreeWithInRange(1,4);
      }
  }