/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public ArrayList<Interval> merge(ArrayList<Interval> intervals) {
        
        Collections.sort(intervals, new Comparator<Interval>() {
            public int compare(Interval a, Interval b) {
                if(a.start < b.start) {
                    return -1;
                } else if (a.start > b.start){
                    return 1;
                } else
                    return 0;
            }
        });
        
        
      //  for (int p =0; p< intervals.size(); p++)
     //     System.out.println("[ "+intervals.get(p).start+" , "+intervals.get(p).end+" ]");

      ArrayList<Interval> newOne = new ArrayList<Interval>();
        int i =0 ;
        int j =0;
        while( i < intervals.size())
        {
            Interval newOneSub = new Interval();
            
            Interval invl , nextInvl;  //= new Interval();
            invl = intervals.get(i);
            newOneSub = invl;
            
            for (j =i+1; j< intervals.size(); j++)
            {
             nextInvl = intervals.get(j); 
        
              if (newOneSub.end >= nextInvl.start) 
              {
                //newOneSub.start = newOneSub.start;
                if (newOneSub.end <= nextInvl.end)
                {  
                   newOneSub.end = nextInvl.end;
                }
              }
              else 
              {   j = j-1;
                  break;
              }
            }
                        
            newOne.add(newOneSub);
            i = j+1;
        }
        
        return newOne;

    }
}
